import { NextRequest, NextResponse } from 'next/server';

// Mode de test pour le d√©veloppement (sans base de donn√©es)
const TEST_MODE = process.env.NODE_ENV === 'development';

// Stockage temporaire en m√©moire pour les tests
const mockScores: Record<string, number[]> = {};

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const campaignId = searchParams.get('campaignId');
    const moderatorWallet = searchParams.get('moderatorWallet');

    console.log('üîç GET /api/moderation/moderator-scores - Params:', { campaignId, moderatorWallet });

    if (!campaignId || !moderatorWallet) {
      console.log('‚ùå Param√®tres manquants');
      return NextResponse.json(
        { error: 'Campaign ID and moderator wallet are required' },
        { status: 400 }
      );
    }

    // En mode test, utiliser le stockage en m√©moire
    if (TEST_MODE) {
      const key = `${campaignId}_${moderatorWallet}`;
      const scores = mockScores[key] || [];
      console.log('üß™ Mode test activ√©, scores r√©cup√©r√©s:', scores);
      return NextResponse.json({ usedScores: scores });
    }

    // TODO: Impl√©menter la vraie logique avec Prisma
    console.log('‚ö†Ô∏è Mode production non encore impl√©ment√©, retour d\'un tableau vide');
    return NextResponse.json({ usedScores: [] });
    
  } catch (error) {
    console.error('‚ùå Erreur dans GET /api/moderation/moderator-scores:', error);
    return NextResponse.json({ usedScores: [] });
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { campaignId, moderatorWallet, score, completionId } = body;

    console.log('üìù POST /api/moderation/moderator-scores - Body:', { campaignId, moderatorWallet, score, completionId });

    if (!campaignId || !moderatorWallet || score === undefined) {
      console.log('‚ùå Donn√©es manquantes dans le body');
      return NextResponse.json(
        { error: 'Campaign ID, moderator wallet, and score are required' },
        { status: 400 }
      );
    }

    // En mode test, utiliser le stockage en m√©moire
    if (TEST_MODE) {
      const key = `${campaignId}_${moderatorWallet}`;
      
      // V√©rifier si le score est d√©j√† utilis√©
      if (mockScores[key] && mockScores[key].includes(score)) {
        console.log('‚ö†Ô∏è Score d√©j√† utilis√©:', score);
        return NextResponse.json(
          { error: 'This score has already been used by this moderator for this campaign' },
          { status: 409 }
        );
      }
      
      // Ajouter le score
      if (!mockScores[key]) {
        mockScores[key] = [];
      }
      mockScores[key].push(score);
      
      console.log('üß™ Mode test activ√©, score ajout√©:', score, 'Scores actuels:', mockScores[key]);
      return NextResponse.json({ success: true, scoreId: `test_${Date.now()}` });
    }

    // TODO: Impl√©menter la vraie logique avec Prisma
    console.log('‚ö†Ô∏è Mode production non encore impl√©ment√©');
    return NextResponse.json({ success: true, scoreId: `mock_${Date.now()}` });
    
  } catch (error) {
    console.error('‚ùå Erreur dans POST /api/moderation/moderator-scores:', error);
    return NextResponse.json(
      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
} 