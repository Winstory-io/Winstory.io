#!/usr/bin/env node

/**
 * Script de test pour les Dev Controls de mod√©ration
 * V√©rifie que tous les √©l√©ments sont correctement configur√©s
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ Test des Dev Controls - Syst√®me de Mod√©ration\n');

// V√©rifier que tous les fichiers n√©cessaires existent
const requiredFiles = [
  'lib/config/moderation-dev-controls.ts',
  'app/api/moderation/dev-controls/route.ts',
  'components/DevControlsPanel.tsx',
  'components/DevControlsButton.tsx',
  'lib/hooks/useModerationDevControls.ts',
  'lib/hooks/useModerationEngineSync.ts',
  'components/ModerationDevControlsTest.tsx',
  'app/moderation/dev-controls-test/page.tsx',
];

console.log('üìÅ V√©rification des fichiers...');
let allFilesExist = true;

requiredFiles.forEach(file => {
  const filePath = path.join(__dirname, '..', file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - MANQUANT`);
    allFilesExist = false;
  }
});

if (!allFilesExist) {
  console.log('\n‚ùå Certains fichiers sont manquants. Veuillez les cr√©er avant de continuer.');
  process.exit(1);
}

console.log('\n‚úÖ Tous les fichiers requis sont pr√©sents');

// V√©rifier la structure de la configuration
console.log('\nüîß V√©rification de la configuration...');

try {
  const configPath = path.join(__dirname, '..', 'lib/config/moderation-dev-controls.ts');
  const configContent = fs.readFileSync(configPath, 'utf8');
  
  // V√©rifier que les interfaces principales sont d√©finies
  const requiredInterfaces = [
    'ModerationDevControls',
    'DEFAULT_MODERATION_DEV_CONTROLS',
    'loadModerationDevControls',
    'saveModerationDevControls',
    'useModerationDevControls'
  ];
  
  requiredInterfaces.forEach(interfaceName => {
    if (configContent.includes(interfaceName)) {
      console.log(`‚úÖ Interface/fonction ${interfaceName} trouv√©e`);
    } else {
      console.log(`‚ùå Interface/fonction ${interfaceName} manquante`);
    }
  });
  
} catch (error) {
  console.log(`‚ùå Erreur lors de la lecture du fichier de configuration: ${error.message}`);
}

// V√©rifier l'API
console.log('\nüåê V√©rification de l\'API...');

try {
  const apiPath = path.join(__dirname, '..', 'app/api/moderation/dev-controls/route.ts');
  const apiContent = fs.readFileSync(apiPath, 'utf8');
  
  const requiredMethods = ['GET', 'POST', 'PUT', 'DELETE'];
  
  requiredMethods.forEach(method => {
    if (apiContent.includes(`export async function ${method}`)) {
      console.log(`‚úÖ M√©thode ${method} trouv√©e`);
    } else {
      console.log(`‚ùå M√©thode ${method} manquante`);
    }
  });
  
} catch (error) {
  console.log(`‚ùå Erreur lors de la lecture du fichier API: ${error.message}`);
}

// V√©rifier les composants
console.log('\nüé® V√©rification des composants...');

const components = [
  { file: 'components/DevControlsPanel.tsx', check: 'DevControlsPanel' },
  { file: 'components/DevControlsButton.tsx', check: 'DevControlsButton' },
  { file: 'components/ModerationDevControlsTest.tsx', check: 'ModerationDevControlsTest' },
];

components.forEach(({ file, check }) => {
  try {
    const componentPath = path.join(__dirname, '..', file);
    const componentContent = fs.readFileSync(componentPath, 'utf8');
    
    if (componentContent.includes(check)) {
      console.log(`‚úÖ Composant ${check} trouv√©`);
    } else {
      console.log(`‚ùå Composant ${check} manquant`);
    }
  } catch (error) {
    console.log(`‚ùå Erreur lors de la lecture du composant ${check}: ${error.message}`);
  }
});

// V√©rifier les hooks
console.log('\nü™ù V√©rification des hooks...');

const hooks = [
  { file: 'lib/hooks/useModerationDevControls.ts', check: 'useModerationDevControlsIntegration' },
  { file: 'lib/hooks/useModerationEngineSync.ts', check: 'useModerationEngineSync' },
];

hooks.forEach(({ file, check }) => {
  try {
    const hookPath = path.join(__dirname, '..', file);
    const hookContent = fs.readFileSync(hookPath, 'utf8');
    
    if (hookContent.includes(check)) {
      console.log(`‚úÖ Hook ${check} trouv√©`);
    } else {
      console.log(`‚ùå Hook ${check} manquant`);
    }
  } catch (error) {
    console.log(`‚ùå Erreur lors de la lecture du hook ${check}: ${error.message}`);
  }
});

// V√©rifier l'int√©gration avec le moteur de mod√©ration
console.log('\n‚öôÔ∏è V√©rification de l\'int√©gration avec le moteur...');

try {
  const enginePath = path.join(__dirname, '..', 'lib/moderation-engine.ts');
  const engineContent = fs.readFileSync(enginePath, 'utf8');
  
  if (engineContent.includes('updateEngineConfig') && engineContent.includes('getEngineConfig')) {
    console.log('‚úÖ Fonctions de configuration du moteur trouv√©es');
  } else {
    console.log('‚ùå Fonctions de configuration du moteur manquantes');
  }
  
  if (engineContent.includes('getEngineConfig()')) {
    console.log('‚úÖ Le moteur utilise la configuration dynamique');
  } else {
    console.log('‚ùå Le moteur n\'utilise pas la configuration dynamique');
  }
  
} catch (error) {
  console.log(`‚ùå Erreur lors de la v√©rification du moteur: ${error.message}`);
}

// V√©rifier l'int√©gration avec les composants existants
console.log('\nüîó V√©rification de l\'int√©gration avec les composants existants...');

try {
  const bubblesPath = path.join(__dirname, '..', 'components/ModerationBubbles.tsx');
  const bubblesContent = fs.readFileSync(bubblesPath, 'utf8');
  
  if (bubblesContent.includes('useModerationComponentConfig')) {
    console.log('‚úÖ ModerationBubbles utilise les Dev Controls');
  } else {
    console.log('‚ùå ModerationBubbles n\'utilise pas les Dev Controls');
  }
  
} catch (error) {
  console.log(`‚ùå Erreur lors de la v√©rification de ModerationBubbles: ${error.message}`);
}

// V√©rifier la page de test
console.log('\nüß™ V√©rification de la page de test...');

try {
  const testPagePath = path.join(__dirname, '..', 'app/moderation/dev-controls-test/page.tsx');
  const testPageContent = fs.readFileSync(testPagePath, 'utf8');
  
  if (testPageContent.includes('ModerationDevControlsTest')) {
    console.log('‚úÖ Page de test trouv√©e');
  } else {
    console.log('‚ùå Page de test manquante');
  }
  
} catch (error) {
  console.log(`‚ùå Erreur lors de la v√©rification de la page de test: ${error.message}`);
}

console.log('\nüéâ Test termin√© !');
console.log('\nüìã R√©sum√© des fonctionnalit√©s impl√©ment√©es :');
console.log('‚úÖ Configuration centralis√©e des Dev Controls');
console.log('‚úÖ API REST pour g√©rer la configuration');
console.log('‚úÖ Interface de configuration avec onglets');
console.log('‚úÖ Bouton d\'acc√®s aux Dev Controls');
console.log('‚úÖ Hooks pour l\'int√©gration avec les composants');
console.log('‚úÖ Synchronisation avec le moteur de mod√©ration');
console.log('‚úÖ Composant de test int√©gr√©');
console.log('‚úÖ Page de test d√©di√©e');
console.log('‚úÖ Documentation compl√®te');

console.log('\nüöÄ Pour tester le syst√®me :');
console.log('1. D√©marrez le serveur de d√©veloppement');
console.log('2. Visitez /moderation pour voir le bouton Dev Controls');
console.log('3. Visitez /moderation/dev-controls-test pour tester la configuration');
console.log('4. Modifiez les param√®tres et observez les changements en temps r√©el');

console.log('\nüìö Consultez DEV_CONTROLS_MODERATION_README.md pour plus de d√©tails');
