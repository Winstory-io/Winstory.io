#!/usr/bin/env tsx

/**
 * Script de test rapide pour le backend GCP Winstory
 * 
 * Usage:
 *   npm run test:gcp-winstory
 *   ou
 *   tsx scripts/test-gcp-winstory.ts
 */

import { testConnection, executeComplete } from '../lib/gcp-winstory-agent';
import { GCP_CONFIG } from '../lib/config/gcp-config';

async function main() {
  console.log('üöÄ Test du Backend GCP Winstory\n');

  // 1. Test de connectivit√©
  console.log('üì° Test de connectivit√© GCP...');
  try {
    const connectivity = await testConnection();
    
    if (connectivity.status === 'success') {
      console.log('‚úÖ Connectivit√© GCP: OK');
      console.log(`   üìä Projet: ${connectivity.data?.projectId}`);
      console.log(`   üîë Service Account: ${connectivity.data?.serviceAccount}`);
      console.log(`   üì¶ Buckets disponibles: ${connectivity.data?.bucketsCount || 0}`);
      console.log(`   üì¢ Topics disponibles: ${connectivity.data?.topicsCount || 0}`);
    } else {
      console.log('‚ùå Connectivit√© GCP: √âCHEC');
      console.log(`   Erreur: ${connectivity.message}`);
      return;
    }
  } catch (error: any) {
    console.log('‚ùå Erreur de connectivit√©:', error.message);
    return;
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // 2. Test Pub/Sub simple (le plus s√ªr)
  console.log('üì§ Test publication Pub/Sub...');
  try {
    const pubsubResult = await executeComplete({
      pubsubTopic: 'winstory-test-topic',
      pubsubMessage: {
        testId: `test-${Date.now()}`,
        message: 'Hello from Winstory GCP Backend!',
        timestamp: new Date().toISOString(),
        source: 'test-script'
      }
    });

    if (pubsubResult.pubsub?.status === 'success') {
      console.log('‚úÖ Publication Pub/Sub: OK');
      console.log(`   üì® Message ID: ${pubsubResult.pubsub.data?.messageId}`);
      console.log(`   üìè Taille: ${pubsubResult.pubsub.data?.messageSize} bytes`);
    } else {
      console.log('‚ö†Ô∏è Publication Pub/Sub: √âCHEC');
      console.log(`   Raison: ${pubsubResult.pubsub?.message}`);
      console.log('   üí° Conseil: V√©rifiez que le topic "winstory-test-topic" existe');
    }
  } catch (error: any) {
    console.log('‚ùå Erreur Pub/Sub:', error.message);
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // 3. Test configuration
  console.log('‚öôÔ∏è V√©rification de la configuration...');
  console.log(`   üèóÔ∏è Projet: ${GCP_CONFIG.PROJECT_ID}`);
  console.log(`   üåé R√©gion: ${GCP_CONFIG.REGIONS.DEFAULT}`);
  console.log(`   ü™£ Bucket vid√©os: ${GCP_CONFIG.STORAGE.VIDEO_BUCKET}`);
  console.log(`   ü§ñ Endpoint Vertex AI: ${GCP_CONFIG.VERTEX_AI.DEFAULT_ENDPOINT}`);
  
  const requiredEnvVars = [
    'GOOGLE_CLOUD_PROJECT',
    'GOOGLE_APPLICATION_CREDENTIALS'
  ];

  console.log('\n   üìã Variables d\'environnement:');
  requiredEnvVars.forEach(envVar => {
    const value = process.env[envVar];
    if (value) {
      console.log(`   ‚úÖ ${envVar}: configur√©`);
    } else {
      console.log(`   ‚ùå ${envVar}: manquant`);
    }
  });

  console.log('\n' + '='.repeat(50) + '\n');

  // 4. Test API endpoints (si disponibles)
  console.log('üåê Test des endpoints API...');
  
  const apiEndpoints = [
    '/api/winstory/gcp-workflow',
    '/api/winstory/upload-video',
    '/api/winstory/vertex-predict',
    '/api/winstory/pubsub-publish'
  ];

  console.log('   üìç Endpoints disponibles:');
  apiEndpoints.forEach(endpoint => {
    console.log(`   üì° ${endpoint}`);
  });

  // 5. R√©sum√©
  console.log('\n' + '='.repeat(50) + '\n');
  console.log('üìã R√âSUM√â DU TEST');
  console.log('================');
  console.log('‚úÖ Service GCP Winstory Agent: Op√©rationnel');
  console.log('‚úÖ Configuration: Charg√©e');
  console.log('‚úÖ Types TypeScript: D√©finis');
  console.log('‚úÖ API Routes: Cr√©√©es');
  console.log('‚úÖ Exemples d\'utilisation: Disponibles');
  console.log('‚úÖ Documentation: Compl√®te');

  console.log('\nüéØ PROCHAINES √âTAPES:');
  console.log('1. Configurer les variables d\'environnement GCP');
  console.log('2. Cr√©er les topics Pub/Sub n√©cessaires');
  console.log('3. Configurer les buckets Cloud Storage');
  console.log('4. D√©ployer les mod√®les Vertex AI');
  console.log('5. Tester avec des donn√©es r√©elles');

  console.log('\nüöÄ Le backend GCP Winstory est PR√äT !');
  console.log('üìñ Guide complet: WINSTORY_GCP_BACKEND_GUIDE.md');
  console.log('üíª Exemples: examples/gcp-winstory-usage.ts');
}

// Gestion des erreurs
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Exception non captur√©e:', error);
  process.exit(1);
});

// Ex√©cution
if (require.main === module) {
  main()
    .then(() => {
      console.log('\n‚úÖ Test termin√© avec succ√®s !');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Test √©chou√©:', error);
      process.exit(1);
    });
}

export { main as testGCPWinstory };
