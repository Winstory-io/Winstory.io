"use client";

import React, { useState, useEffect, useMemo } from 'react';
import { Play, Award, Lock, Gift, Trophy, Medal, Crown, Clock, CheckCircle, XCircle, Eye, EyeOff } from 'lucide-react';

interface Completion {
  id: string;
  campaignTitle: string;
  completionTitle: string;
  date: string;
  status: 'completed' | 'in_progress' | 'in_moderation' | 'validated' | 'refused' | 'top1' | 'top2' | 'top3';
  score?: number; // Average score out of 100 from moderators
  ranking?: number; // Position in ranking
  roiEarned?: number; // ROI earned by completer (only if top 3 on individual campaign)
  standardReward?: string; // Standard reward offered
  premiumReward?: string; // Premium reward offered if top 3
  campaignEndDate?: string; // Campaign end date
  completionTarget?: number; // Target number of completions
  currentCompletions?: number; // Current number of completions
  usdcRevenue?: number; // USDC revenue generated by paid rewards
  campaignCreatorType?: 'individual' | 'company' | 'agency'; // Campaign creator type
  moderatorScores?: { stakerId: string; stakerName: string; score: number; stakedAmount: number; }[];
  videoUrl?: string; // Completion video URL
  story?: string; // Completion text
  isBurned?: boolean; // If content is burned
}

interface AllCompletionsDashboardProps {
  completions?: Completion[];
  onOpenCampaign?: (campaignId: string) => void;
  className?: string;
  videoFormat?: '16:9' | '9:16';
  price?: string;
}

export default function AllCompletionsDashboard({ 
  completions = [], 
  onOpenCampaign,
  className = "",
  videoFormat = '16:9',
  price = '$25 USD'
}: AllCompletionsDashboardProps) {
  const [previewModal, setPreviewModal] = useState<{ completion: Completion | null }>({ completion: null });
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [sortBy, setSortBy] = useState<'date_desc' | 'date_asc' | 'score_desc' | 'score_asc'>('date_desc');

  // Mock data for demonstration - replace with real data fetching
  const mockCompletions: Completion[] = [
    {
      id: '1',
      campaignTitle: 'Nike Air Max Campaign',
      completionTitle: 'Urban Runner Story',
      date: '2024-01-15',
      status: 'top1',
      score: 95,
      ranking: 1,
      roiEarned: 150,
      standardReward: '50 WINC tokens',
      premiumReward: 'Exclusive Nike NFT + 100 WINC',
      campaignCreatorType: 'company',
      videoUrl: '/sample-video.mp4',
      story: 'A runner navigating the urban landscape...',
      isBurned: false
    },
    {
      id: '2',
      campaignTitle: 'Coca-Cola Summer Vibes',
      completionTitle: 'Beach Party Adventure',
      date: '2024-01-10',
      status: 'top2',
      score: 88,
      ranking: 2,
      roiEarned: 100,
      standardReward: '30 WINC tokens',
      premiumReward: 'Coca-Cola Merch + 75 WINC',
      campaignCreatorType: 'company',
      videoUrl: '/sample-video2.mp4',
      story: 'Summer memories at the beach...',
      isBurned: false
    },
    {
      id: '3',
      campaignTitle: 'Local Restaurant Promotion',
      completionTitle: 'Family Dinner Story',
      date: '2024-01-08',
      status: 'top3',
      score: 82,
      ranking: 3,
      roiEarned: 75,
      standardReward: '20 WINC tokens',
      premiumReward: 'Restaurant Voucher + 50 WINC',
      campaignCreatorType: 'individual',
      videoUrl: '/sample-video3.mp4',
      story: 'A heartwarming family dinner...',
      isBurned: false
    },
    {
      id: '4',
      campaignTitle: 'Tech Startup Launch',
      completionTitle: 'Innovation Journey',
      date: '2024-01-05',
      status: 'validated',
      score: 76,
      ranking: 5,
      standardReward: '15 WINC tokens',
      campaignCreatorType: 'individual',
      videoUrl: '/sample-video4.mp4',
      story: 'Building the future of technology...',
      isBurned: true
    },
    {
      id: '5',
      campaignTitle: 'Fashion Brand Campaign',
      completionTitle: 'Style Evolution',
      date: '2024-01-03',
      status: 'refused',
      score: 45,
      standardReward: 'No reward',
      campaignCreatorType: 'agency',
      videoUrl: '/sample-video5.mp4',
      story: 'A fashion transformation story...',
      isBurned: true
    },
    {
      id: '6',
      campaignTitle: 'Music Festival Promotion',
      completionTitle: 'Festival Experience',
      date: '2024-01-20',
      status: 'in_moderation',
      score: undefined,
      campaignCreatorType: 'company',
      videoUrl: '/sample-video6.mp4',
      story: 'An unforgettable festival experience...',
      isBurned: false
    }
  ];

  // Use mock data if no completions provided
  const allCompletions = completions.length > 0 ? completions : mockCompletions;

  // Calculate global statistics
  const stats = useMemo(() => {
    const total = allCompletions.length;
    const validated = allCompletions.filter(c => c.status === 'validated').length;
    const refused = allCompletions.filter(c => c.status === 'refused').length;
    const top3 = allCompletions.filter(c => ['top1', 'top2', 'top3'].includes(c.status)).length;
    const inModeration = allCompletions.filter(c => c.status === 'in_moderation').length;
    
    const scoresWithValues = allCompletions.filter(c => c.score !== undefined);
    const avgScore = scoresWithValues.length > 0 
      ? Math.round(scoresWithValues.reduce((sum, c) => sum + (c.score || 0), 0) / scoresWithValues.length)
      : 0;

    return { total, validated, refused, top3, inModeration, avgScore };
  }, [allCompletions]);

  // Filter and sort completions
  const filteredCompletions = useMemo(() => {
    let filtered = allCompletions.filter(completion => {
      const matchesSearch = searchQuery === '' || 
        completion.campaignTitle.toLowerCase().includes(searchQuery.toLowerCase()) ||
        completion.completionTitle.toLowerCase().includes(searchQuery.toLowerCase());
      
      const matchesStatus = statusFilter === 'all' || completion.status === statusFilter;
      
      return matchesSearch && matchesStatus;
    });

    // Sort completions
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'score_desc':
          return (b.score || 0) - (a.score || 0);
        case 'score_asc':
          return (a.score || 0) - (b.score || 0);
        case 'date_asc':
          return new Date(a.date).getTime() - new Date(b.date).getTime();
        case 'date_desc':
        default:
          return new Date(b.date).getTime() - new Date(a.date).getTime();
      }
    });

    return filtered;
  }, [allCompletions, searchQuery, statusFilter, sortBy]);

  // Get card styling based on status
  const getCardStyle = (status: string) => {
    const baseStyle = {
      background: 'rgba(0,0,0,0.6)',
      borderRadius: '20px',
      padding: '20px',
      minWidth: '320px',
      cursor: 'pointer',
      transition: 'all 0.3s ease',
      position: 'relative' as const,
      backdropFilter: 'blur(10px)'
    };

    switch (status) {
      case 'top1':
        return {
          ...baseStyle,
          border: '2px solid #FFD700',
          boxShadow: '0 0 24px rgba(255, 215, 0, 0.25)',
          background: 'rgba(255, 215, 0, 0.05)'
        };
      case 'top2':
        return {
          ...baseStyle,
          border: '2px solid #C0C0C0',
          boxShadow: '0 0 24px rgba(192, 192, 192, 0.25)',
          background: 'rgba(192, 192, 192, 0.05)'
        };
      case 'top3':
        return {
          ...baseStyle,
          border: '2px solid #CD7F32',
          boxShadow: '0 0 24px rgba(205, 127, 50, 0.25)',
          background: 'rgba(205, 127, 50, 0.05)'
        };
      case 'validated':
        return {
          ...baseStyle,
          border: '2px solid #18C964',
          boxShadow: '0 0 24px rgba(24, 201, 100, 0.25)',
          background: 'rgba(24, 201, 100, 0.05)'
        };
      case 'refused':
        return {
          ...baseStyle,
          border: '2px solid #FF3333',
          boxShadow: '0 0 24px rgba(255, 51, 51, 0.25)',
          background: 'rgba(255, 51, 51, 0.05)'
        };
      case 'in_moderation':
        return {
          ...baseStyle,
          border: '2px solid #FFFFFF',
          boxShadow: '0 0 24px rgba(255, 255, 255, 0.25)',
          background: 'rgba(255, 255, 255, 0.05)',
          animation: 'pulse 2s infinite'
        };
      default:
        return {
          ...baseStyle,
          border: '2px solid #333',
          boxShadow: '0 0 12px rgba(51, 51, 51, 0.25)'
        };
    }
  };

  // Get status badge
  const getStatusBadge = (status: string) => {
    const badges = {
      top1: { label: '🥇 N°1', icon: null, color: '#FFD700' },
      top2: { label: '🥈 N°2', icon: null, color: '#C0C0C0' },
      top3: { label: '🥉 N°3', icon: null, color: '#CD7F32' },
      validated: { label: 'Validated', icon: <CheckCircle size={16} />, color: '#18C964' },
      refused: { label: 'Refused', icon: <XCircle size={16} />, color: '#FF3333' },
      in_moderation: { label: 'In Progress', icon: <Clock size={16} />, color: '#FFFFFF' }
    };

    const badge = badges[status as keyof typeof badges] || { label: status, icon: null, color: '#666' };

    return (
      <div style={{
        display: 'flex',
        alignItems: 'center',
        gap: '6px',
        color: badge.color,
        fontWeight: 700,
        fontSize: '13px',
        background: 'rgba(0,0,0,0.7)',
        padding: '4px 8px',
        borderRadius: '8px',
        border: `1px solid ${badge.color}`,
        backdropFilter: 'blur(4px)'
      }}>
        {badge.icon}
        {badge.label}
      </div>
    );
  };

  // Get title color based on status
  const getTitleColor = (status: string) => {
    switch (status) {
      case 'top1': return '#FFD700'; // Gold
      case 'top2': return '#C0C0C0'; // Silver
      case 'top3': return '#CD7F32'; // Bronze
      case 'validated': return '#18C964'; // Green
      case 'refused': return '#FF3333'; // Red
      case 'in_moderation': return '#FFFFFF'; // White
      default: return '#FFFFFF';
    }
  };

  // Get video aspect ratio
  const getVideoAspectRatio = () => {
    switch (videoFormat) {
      case '16:9': return '16/9';
      case '9:16': return '9/16';
      default: return '16/9';
    }
  };

  // Get price display based on campaign type
  const getPriceDisplay = (completion: Completion) => {
    return price || 'FREE';
  };

  // Get price color based on completion status
  const getPriceColor = (completion: Completion) => {
    switch (completion.status) {
      case 'top1': return '#FFD700'; // Gold
      case 'top2': return '#C0C0C0'; // Silver
      case 'top3': return '#CD7F32'; // Bronze
      case 'validated': return '#18C964'; // Green
      case 'refused': return '#FF3333'; // Red
      case 'in_moderation': return '#FFFFFF'; // White
      default: return '#FFFFFF';
    }
  };

  // Check if content is accessible
  const isContentAccessible = (completion: Completion) => {
    return completion.status === 'in_moderation' || 
           ['top1', 'top2', 'top3'].includes(completion.status) ||
           (completion.status === 'validated' && !completion.isBurned);
  };

  // Handle card click
  const handleCardClick = (completion: Completion) => {
    if (isContentAccessible(completion)) {
      setPreviewModal({ completion });
    }
  };

  // Handle campaign open
  const handleOpenCampaign = (completion: Completion) => {
    if (onOpenCampaign) {
      onOpenCampaign(completion.id);
    }
  };

  return (
    <div className={`p-6 ${className}`}>
      {/* Header */}
      <div style={{ marginBottom: '32px' }}>
        <h2 style={{ 
          fontSize: '36px', 
          fontWeight: 800, 
          color: '#FFFFFF',
          marginBottom: '8px',
          textAlign: 'center'
        }}>
          All Completions
        </h2>
        <p style={{ 
          color: '#C0C0C0', 
          marginBottom: '24px',
          textAlign: 'center',
          fontSize: '16px'
        }}>
          View all your completion history
        </p>

        {/* Global Statistics */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
          gap: '16px',
          marginBottom: '32px',
          maxWidth: '1000px',
          margin: '0 auto 32px auto'
        }}>
          <div style={{
            background: 'rgba(0,0,0,0.6)',
            border: '1px solid #333',
            borderRadius: '12px',
            padding: '16px',
            textAlign: 'center'
          }}>
            <div style={{ color: '#FFD600', fontSize: '24px', fontWeight: 700 }}>
              {stats.total}
            </div>
            <div style={{ color: '#C0C0C0', fontSize: '14px' }}>
              Campaigns Completed
            </div>
          </div>
          <div style={{
            background: 'rgba(0,0,0,0.6)',
            border: '1px solid #333',
            borderRadius: '12px',
            padding: '16px',
            textAlign: 'center'
          }}>
            <div style={{ color: '#FFD600', fontSize: '24px', fontWeight: 700 }}>
              {stats.avgScore}
            </div>
            <div style={{ color: '#C0C0C0', fontSize: '14px' }}>
              Average Scores out of 100
            </div>
          </div>
          <div style={{
            background: 'rgba(0,0,0,0.6)',
            border: '1px solid #333',
            borderRadius: '12px',
            padding: '16px',
            textAlign: 'center'
          }}>
            <div style={{ color: '#18C964', fontSize: '24px', fontWeight: 700 }}>
              {stats.validated}
            </div>
            <div style={{ color: '#C0C0C0', fontSize: '14px' }}>
              Validated
            </div>
          </div>
          <div style={{
            background: 'rgba(0,0,0,0.6)',
            border: '1px solid #333',
            borderRadius: '12px',
            padding: '16px',
            textAlign: 'center'
          }}>
            <div style={{ color: '#FFD700', fontSize: '24px', fontWeight: 700 }}>
              {stats.top3}
            </div>
            <div style={{ color: '#C0C0C0', fontSize: '14px' }}>
              Top 3 Finishes
            </div>
          </div>
        </div>

        {/* Filters and Search */}
        <div style={{
          display: 'flex',
          gap: '16px',
          marginBottom: '24px',
          flexWrap: 'wrap',
          justifyContent: 'center',
          maxWidth: '1000px',
          margin: '0 auto 24px auto'
        }}>
          <input
            type="text"
            placeholder="Search by campaign or completion title..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            style={{
              background: 'rgba(0,0,0,0.6)',
              border: '1px solid #333',
              borderRadius: '8px',
              padding: '12px 16px',
              color: '#FFFFFF',
              fontSize: '14px',
              minWidth: '300px',
              flex: 1
            }}
          />
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            style={{
              background: 'rgba(0,0,0,0.6)',
              border: '1px solid #333',
              borderRadius: '8px',
              padding: '12px 16px',
              color: '#FFFFFF',
              fontSize: '14px',
              minWidth: '150px'
            }}
          >
            <option value="all">All Status</option>
            <option value="top1">N°1 (Gold)</option>
            <option value="top2">N°2 (Silver)</option>
            <option value="top3">N°3 (Bronze)</option>
            <option value="validated">Validated</option>
            <option value="refused">Refused</option>
            <option value="in_moderation">In Progress</option>
          </select>
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value as any)}
            style={{
              background: 'rgba(0,0,0,0.6)',
              border: '1px solid #333',
              borderRadius: '8px',
              padding: '12px 16px',
              color: '#FFFFFF',
              fontSize: '14px',
              minWidth: '150px'
            }}
          >
            <option value="date_desc">Newest First</option>
            <option value="date_asc">Oldest First</option>
            <option value="score_desc">Highest Score</option>
            <option value="score_asc">Lowest Score</option>
          </select>
        </div>
      </div>

      {/* Completions Grid */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(350px, 1fr))',
        gap: '24px',
        maxWidth: '1200px',
        margin: '0 auto'
      }}>
        {filteredCompletions.map((completion) => (
          <div
            key={completion.id}
            style={getCardStyle(completion.status)}
            onClick={() => handleCardClick(completion)}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-4px)';
              e.currentTarget.style.boxShadow = '0 8px 32px rgba(255, 215, 0, 0.15)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              const cardStyle = getCardStyle(completion.status);
              e.currentTarget.style.boxShadow = cardStyle.boxShadow;
            }}
          >
            {/* Status Badge */}
            <div style={{
              position: 'absolute',
              top: '12px',
              right: '12px'
            }}>
              {getStatusBadge(completion.status)}
            </div>

            {/* Campaign Info */}
            <div style={{ marginBottom: '16px', paddingRight: '120px' }}>
              <div style={{
                color: '#FFD600',
                fontSize: '12px',
                fontWeight: 700,
                marginBottom: '4px'
              }}>
                ID: {completion.id}
              </div>
              <h3 style={{
                color: getTitleColor(completion.status),
                fontSize: '18px',
                fontWeight: 700,
                marginBottom: '8px',
                lineHeight: '1.3'
              }}>
                {completion.campaignTitle}
              </h3>
              <p style={{
                color: '#C0C0C0',
                fontSize: '14px',
                marginBottom: '8px'
              }}>
                {completion.completionTitle}
              </p>
              <div style={{
                color: '#9CA3AF',
                fontSize: '12px',
                background: 'rgba(156, 163, 175, 0.1)',
                padding: '4px 8px',
                borderRadius: '6px',
                display: 'inline-block'
              }}>
                {completion.campaignCreatorType === 'individual' ? 'Individual' : 
                 completion.campaignCreatorType === 'company' ? 'B2C / Agency' : 'Agency'}
              </div>
            </div>

            {/* Score and Ranking */}
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '16px'
            }}>
              <div>
                {completion.status !== 'refused' && (
                  <div style={{ color: '#FFD600', fontSize: '12px', fontWeight: 700 }}>
                    Score / 100
                  </div>
                )}
                <div style={{ color: completion.status === 'refused' ? '#FF3333' : '#FFFFFF', fontSize: '24px', fontWeight: 700 }}>
                  {completion.status === 'refused' ? 'No Reward' : (completion.score ?? '--')}
                </div>
              </div>
              {completion.ranking && (
                <div style={{
                  background: completion.status === 'top1' ? 'rgba(255, 215, 0, 0.1)' : 
                             completion.status === 'top2' ? 'rgba(192, 192, 192, 0.1)' : 
                             'rgba(205, 127, 50, 0.1)',
                  border: completion.status === 'top1' ? '1px solid #FFD700' : 
                          completion.status === 'top2' ? '1px solid #C0C0C0' : 
                          '1px solid #CD7F32',
                  borderRadius: '8px',
                  padding: '8px 12px',
                  textAlign: 'center'
                }}>
                  <div style={{ 
                    color: completion.status === 'top1' ? '#FFD700' : 
                           completion.status === 'top2' ? '#C0C0C0' : 
                           '#CD7F32', 
                    fontSize: '12px', 
                    fontWeight: 700 
                  }}>
                    Ranking
                  </div>
                  <div style={{ color: '#FFFFFF', fontSize: '18px', fontWeight: 700 }}>
                    #{completion.ranking}
                  </div>
                </div>
              )}
            </div>

            {/* Content Access */}
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '16px'
            }}>
              <div style={{ display: 'flex', gap: '12px' }}>
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px',
                  color: isContentAccessible(completion) ? (completion.status === 'validated' ? '#18C964' : '#18C964') : '#FF3333'
                }}>
                  {isContentAccessible(completion) ? <Eye size={16} /> : <EyeOff size={16} />}
                  <span style={{ fontSize: '12px', fontWeight: 600 }}>
                    {isContentAccessible(completion) ? 'Story' : 'Story burn'}
                  </span>
                </div>
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px',
                  color: isContentAccessible(completion) ? (completion.status === 'validated' ? '#18C964' : '#18C964') : '#FF3333'
                }}>
                  {isContentAccessible(completion) ? <Play size={16} /> : <Lock size={16} />}
                  <span style={{ fontSize: '12px', fontWeight: 600 }}>
                    {isContentAccessible(completion) ? 'Video' : 'Video burn'}
                  </span>
                </div>
              </div>
            </div>

            {/* Rewards */}
            {completion.status !== 'refused' && (
              <div style={{ marginBottom: '16px' }}>
                <div style={{ color: '#FFD600', fontSize: '12px', fontWeight: 700, marginBottom: '8px' }}>
                  Rewards
                </div>
                <div style={{ fontSize: '12px', marginBottom: '4px' }}>
                  <span style={{ color: '#C0C0C0' }}>Standard: </span>
                  <span style={{ color: completion.standardReward === 'No reward' ? '#FF3333' : '#FFFFFF' }}>
                    {completion.standardReward || 'No reward'}
                  </span>
                </div>
                {completion.premiumReward && (
                  <div style={{ fontSize: '12px' }}>
                    <span style={{ color: '#FFD700' }}>Premium: </span>
                    <span style={{ color: '#FFFFFF' }}>{completion.premiumReward}</span>
                  </div>
                )}
              </div>
            )}

            {/* Price Display */}
            <div style={{
              position: 'absolute',
              bottom: '12px',
              right: '12px',
              background: 'rgba(0, 0, 0, 0.8)',
              borderRadius: '8px',
              padding: '6px 10px',
              border: `1px solid ${getPriceColor(completion)}`
            }}>
              <div style={{
                color: getPriceColor(completion),
                fontSize: '12px',
                fontWeight: 700,
                textAlign: 'center'
              }}>
                {getPriceDisplay(completion)}
              </div>
            </div>

            {/* Actions */}
            <div style={{
              display: 'flex',
              gap: '8px',
              justifyContent: 'flex-end'
            }}>
              {/* Actions removed for now - not needed in current layout */}
            </div>

            {/* Date */}
            <div style={{
              color: '#9CA3AF',
              fontSize: '12px',
              marginTop: '12px',
              textAlign: 'center'
            }}>
              Completed on {new Date(completion.date).toLocaleDateString()}
            </div>
          </div>
        ))}
      </div>

      {/* Empty State */}
      {filteredCompletions.length === 0 && (
        <div style={{
          textAlign: 'center',
          padding: '48px 24px',
          background: 'rgba(0, 0, 0, 0.6)',
          border: '2px dashed #333',
          borderRadius: '16px',
          maxWidth: '600px',
          margin: '0 auto'
        }}>
          <div style={{ fontSize: '48px', marginBottom: '16px', opacity: 0.5 }}>📝</div>
          <h3 style={{ color: '#C0C0C0', fontSize: '20px', marginBottom: '8px' }}>
            No completions found
          </h3>
          <p style={{ color: '#888', fontSize: '16px' }}>
            {searchQuery || statusFilter !== 'all' 
              ? 'Try adjusting your search or filter criteria.'
              : 'Your completed campaigns will appear here once you start participating.'
            }
          </p>
        </div>
      )}

      {/* Preview Modal */}
      {previewModal.completion && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000,
          padding: '20px'
        }}>
          <div style={{
            background: 'rgba(0, 0, 0, 0.9)',
            borderRadius: '20px',
            padding: '24px',
            maxWidth: '800px',
            width: '100%',
            maxHeight: '90vh',
            overflow: 'auto',
            border: previewModal.completion.status === 'top1' ? '2px solid #FFD700' :
                    previewModal.completion.status === 'top2' ? '2px solid #C0C0C0' :
                    previewModal.completion.status === 'top3' ? '2px solid #CD7F32' :
                    previewModal.completion.status === 'validated' ? '2px solid #18C964' :
                    previewModal.completion.status === 'refused' ? '2px solid #FF3333' :
                    '2px solid #FFFFFF'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'flex-start',
              marginBottom: '20px'
            }}>
              <div>
                <h3 style={{ color: '#FFFFFF', fontSize: '20px', fontWeight: 700, marginBottom: '8px' }}>
                  {previewModal.completion.campaignTitle}
                </h3>
                <p style={{ color: '#C0C0C0', fontSize: '16px' }}>
                  {previewModal.completion.completionTitle}
                </p>
              </div>
              <button
                onClick={() => setPreviewModal({ completion: null })}
                style={{
                  background: '#FF3333',
                  border: 'none',
                  borderRadius: '8px',
                  padding: '8px 16px',
                  color: '#FFFFFF',
                  fontSize: '14px',
                  fontWeight: 600,
                  cursor: 'pointer'
                }}
              >
                Close
              </button>
            </div>

            {/* Video Preview */}
            {previewModal.completion.videoUrl && (
              <div style={{ 
                marginBottom: '20px',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center'
              }}>
                <video
                  controls
                  src={previewModal.completion.videoUrl}
                  style={{
                    width: videoFormat === '9:16' ? '60%' : '100%',
                    maxWidth: videoFormat === '9:16' ? '300px' : '100%',
                    aspectRatio: getVideoAspectRatio(),
                    borderRadius: '12px',
                    background: '#000'
                  }}
                />
              </div>
            )}

            {/* Story Text */}
            <div style={{ marginBottom: '20px' }}>
              <h4 style={{ color: '#FFD600', fontSize: '16px', fontWeight: 700, marginBottom: '12px' }}>
                Completion Story
              </h4>
              <div style={{
                background: 'rgba(0, 0, 0, 0.6)',
                border: '1px solid #333',
                borderRadius: '12px',
                padding: '16px',
                color: '#FFFFFF',
                fontSize: '14px',
                lineHeight: '1.6'
              }}>
                {previewModal.completion.story || 'No story provided.'}
              </div>
            </div>

            {/* Completion Details */}
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
              gap: '16px',
              marginTop: '20px'
            }}>
              <div style={{
                background: 'rgba(255, 215, 0, 0.1)',
                border: '1px solid #FFD600',
                borderRadius: '8px',
                padding: '12px',
                textAlign: 'center'
              }}>
                <div style={{ color: '#FFD600', fontSize: '12px', fontWeight: 700 }}>Score</div>
                <div style={{ color: '#FFFFFF', fontSize: '18px', fontWeight: 700 }}>
                  {previewModal.completion.score ?? '--'}
                </div>
              </div>
              {previewModal.completion.ranking && (
                <div style={{
                  background: previewModal.completion.status === 'top1' ? 'rgba(255, 215, 0, 0.1)' : 
                             previewModal.completion.status === 'top2' ? 'rgba(192, 192, 192, 0.1)' : 
                             'rgba(205, 127, 50, 0.1)',
                  border: previewModal.completion.status === 'top1' ? '1px solid #FFD700' : 
                          previewModal.completion.status === 'top2' ? '1px solid #C0C0C0' : 
                          '1px solid #CD7F32',
                  borderRadius: '8px',
                  padding: '12px',
                  textAlign: 'center'
                }}>
                  <div style={{ 
                    color: previewModal.completion.status === 'top1' ? '#FFD700' : 
                           previewModal.completion.status === 'top2' ? '#C0C0C0' : 
                           '#CD7F32', 
                    fontSize: '12px', 
                    fontWeight: 700 
                  }}>Ranking</div>
                  <div style={{ color: '#FFFFFF', fontSize: '18px', fontWeight: 700 }}>
                    #{previewModal.completion.ranking}
                  </div>
                </div>
              )}
              <div style={{
                background: previewModal.completion.status === 'top1' ? 'rgba(255, 215, 0, 0.1)' :
                           previewModal.completion.status === 'top2' ? 'rgba(192, 192, 192, 0.1)' :
                           previewModal.completion.status === 'top3' ? 'rgba(205, 127, 50, 0.1)' :
                           previewModal.completion.status === 'validated' ? 'rgba(24, 201, 100, 0.1)' :
                           previewModal.completion.status === 'refused' ? 'rgba(255, 51, 51, 0.1)' :
                           'rgba(255, 255, 255, 0.1)',
                border: previewModal.completion.status === 'top1' ? '1px solid #FFD700' :
                        previewModal.completion.status === 'top2' ? '1px solid #C0C0C0' :
                        previewModal.completion.status === 'top3' ? '1px solid #CD7F32' :
                        previewModal.completion.status === 'validated' ? '1px solid #18C964' :
                        previewModal.completion.status === 'refused' ? '1px solid #FF3333' :
                        '1px solid #FFFFFF',
                borderRadius: '8px',
                padding: '12px',
                textAlign: 'center'
              }}>
                <div style={{ 
                  color: previewModal.completion.status === 'top1' ? '#FFD700' :
                         previewModal.completion.status === 'top2' ? '#C0C0C0' :
                         previewModal.completion.status === 'top3' ? '#CD7F32' :
                         previewModal.completion.status === 'validated' ? '#18C964' :
                         previewModal.completion.status === 'refused' ? '#FF3333' :
                         '#FFFFFF', 
                  fontSize: '12px', 
                  fontWeight: 700 
                }}>Status</div>
                <div style={{ color: '#FFFFFF', fontSize: '14px', fontWeight: 700 }}>
                  {previewModal.completion.status}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* CSS Animation for pulse effect */}
      <style jsx>{`
        @keyframes pulse {
          0% {
            box-shadow: 0 0 24px rgba(255, 255, 255, 0.25);
          }
          50% {
            box-shadow: 0 0 32px rgba(255, 255, 255, 0.4);
          }
          100% {
            box-shadow: 0 0 24px rgba(255, 255, 255, 0.25);
          }
        }
      `}</style>
    </div>
  );
}
