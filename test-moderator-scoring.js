/**
 * Script de test pour le syst√®me de notation par mod√©rateur
 * Teste les API endpoints pour les scores utilis√©s par mod√©rateur
 */

const BASE_URL = 'http://localhost:3000';

// Donn√©es de test
const testData = {
  campaignId: 'test_campaign_123',
  moderatorWallet: '0x1234567890123456789012345678901234567890',
  scores: [25, 67, 89]
};

async function testModeratorScoringAPI() {
  console.log('üß™ Test du syst√®me de notation par mod√©rateur');
  console.log('================================================\n');

  try {
    // 1. Test GET initial (devrait √™tre vide)
    console.log('1. Test GET initial (scores vides)...');
    const initialResponse = await fetch(
      `${BASE_URL}/api/moderation/moderator-scores?campaignId=${testData.campaignId}&moderatorWallet=${testData.moderatorWallet}`
    );
    
    if (initialResponse.ok) {
      const initialData = await initialResponse.json();
      console.log('‚úÖ R√©ponse initiale:', initialData);
      console.log(`   Scores utilis√©s: ${initialData.usedScores.length === 0 ? 'Aucun (correct)' : initialData.usedScores.join(', ')}\n`);
    } else {
      console.log('‚ùå Erreur lors du GET initial:', initialResponse.status, '\n');
    }

    // 2. Test POST pour ajouter des scores
    console.log('2. Test POST pour ajouter des scores...');
    for (const score of testData.scores) {
      console.log(`   Ajout du score ${score}...`);
      
      const postResponse = await fetch(`${BASE_URL}/api/moderation/moderator-scores`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          campaignId: testData.campaignId,
          moderatorWallet: testData.moderatorWallet,
          score: score,
          completionId: `completion_${score}`
        }),
      });

      if (postResponse.ok) {
        const postData = await postResponse.json();
        console.log(`   ‚úÖ Score ${score} ajout√© avec succ√®s:`, postData.scoreId);
      } else {
        const errorData = await postResponse.json();
        console.log(`   ‚ùå Erreur lors de l'ajout du score ${score}:`, errorData.error);
      }
    }
    console.log('');

    // 3. Test GET apr√®s ajout des scores
    console.log('3. Test GET apr√®s ajout des scores...');
    const finalResponse = await fetch(
      `${BASE_URL}/api/moderation/moderator-scores?campaignId=${testData.campaignId}&moderatorWallet=${testData.moderatorWallet}`
    );
    
    if (finalResponse.ok) {
      const finalData = await finalResponse.json();
      console.log('‚úÖ Scores utilis√©s apr√®s ajout:', finalData.usedScores);
      
      // V√©rifier que tous les scores ont √©t√© ajout√©s
      const expectedScores = testData.scores.sort();
      const actualScores = finalData.usedScores.sort();
      
      if (JSON.stringify(expectedScores) === JSON.stringify(actualScores)) {
        console.log('‚úÖ Tous les scores ont √©t√© correctement enregistr√©s\n');
      } else {
        console.log('‚ùå Incoh√©rence dans les scores enregistr√©s');
        console.log('   Attendu:', expectedScores);
        console.log('   Obtenu:', actualScores, '\n');
      }
    } else {
      console.log('‚ùå Erreur lors du GET final:', finalResponse.status, '\n');
    }

    // 4. Test de contrainte unique (tentative d'ajout d'un score d√©j√† utilis√©)
    console.log('4. Test de contrainte unique (score d√©j√† utilis√©)...');
    const duplicateScore = testData.scores[0];
    const duplicateResponse = await fetch(`${BASE_URL}/api/moderation/moderator-scores`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        campaignId: testData.campaignId,
        moderatorWallet: testData.moderatorWallet,
        score: duplicateScore,
        completionId: `completion_duplicate_${duplicateScore}`
      }),
    });

    if (duplicateResponse.status === 409) {
      const duplicateError = await duplicateResponse.json();
      console.log(`‚úÖ Contrainte unique respect√©e pour le score ${duplicateScore}:`, duplicateError.error);
    } else {
      console.log(`‚ùå La contrainte unique n'a pas fonctionn√© pour le score ${duplicateScore}`);
    }
    console.log('');

    // 5. Test avec un autre mod√©rateur (devrait √™tre ind√©pendant)
    console.log('5. Test avec un autre mod√©rateur...');
    const otherModerator = '0xABCDEF1234567890123456789012345678901234';
    
    const otherModeratorResponse = await fetch(
      `${BASE_URL}/api/moderation/moderator-scores?campaignId=${testData.campaignId}&moderatorWallet=${otherModerator}`
    );
    
    if (otherModeratorResponse.ok) {
      const otherModeratorData = await otherModeratorResponse.json();
      console.log('‚úÖ Scores pour un autre mod√©rateur:', otherModeratorData.usedScores);
      
      if (otherModeratorData.usedScores.length === 0) {
        console.log('‚úÖ Les scores sont bien isol√©s par mod√©rateur\n');
      } else {
        console.log('‚ùå Les scores ne sont pas correctement isol√©s par mod√©rateur\n');
      }
    }

    console.log('üéâ Tests termin√©s avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

// Lancer les tests
if (typeof window === 'undefined') {
  // Environnement Node.js
  testModeratorScoringAPI();
} else {
  // Environnement navigateur
  console.log('Script de test - √† lancer c√¥t√© serveur');
} 